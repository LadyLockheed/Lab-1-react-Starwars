{"version":3,"sources":["components/AddCharacterForm.jsx","components/AddPlanetForm.jsx","components/AddOwnFavorite.jsx","components/Header.jsx","components/Search.jsx","components/Favorites.jsx","App.js","serviceWorker.js","index.js"],"names":["AddCharacterForm","favorites","setFavorites","useState","isAdded","setIsAdded","name","setName","birthYear","setBirthYear","era","setEra","hairColor","setHairColor","skinColor","setSkinColor","nameIsTouched","setNameIsTouched","birthYearIsTouched","setBirthYearIsTouched","hairColorIsTouched","setHairColorIsTouched","skinColorIsTouched","setSkinColorIsTouched","subMsgClassName","setSubMsgClassName","filteredPeople","filter","item","undefined","birth_year","invalidButton","nameIsValid","validName","nameValidMessage","birthYearIsValid","validBirthYear","birthYearValidMessage","hairColorIsValid","validHairColor","hairColorValidMessage","skinColorIsValid","validSkinColor","skinColorValidMessage","checkIfAllIsValid","useEffect","console","log","type","id","value","className","onBlur","onChange","event","target","onClick","e","preventDefault","newCharacter","hair_color","skin_color","created","favorite","newCharAddedList","handleSubmit","disabled","some","person","length","birthyear","haircolor","skincolor","AddPlanetForm","climate","setClimate","terrain","setTerrain","gravity","setGravity","climateIsTouched","setClimateIsTouched","terrainIsTouched","setTerrainIsTouched","gravityIsTouched","setGravityIsTouched","filteredPlanets","climateIsValid","validClimate","climateValidMessage","terrainIsValid","validTerrain","terrainValidMessage","gravityIsValid","validGravity","newPlanet","newPlanetAddedList","planet","AddOwnFavorite","category","setCategory","currentCategoryForm","Header","displayPage","setDisplayPage","searchNav","addNav","favoritesNav","handlePageToggle","page","Search","peopleData","planetsData","searchParams","setSearchParams","handleAddToFavorites","newItem","newFavorite","cardButtonCss","jsxListPeople","toLowerCase","includes","map","key","gender","jsxListPlanets","currentCategory","peoplebutton","planetsbutton","placeholder","Favorites","displayList","setDisplayList","favAllButton","favPeopleButton","favPlanetsButton","currentList","imageClassName","category1","category2","category3","categoryItem1","categoryItem2","categoryItem3","jsxList","index","itemToRemove","App","setPeopleData","setPlanetsData","currentPage","welcomeText","a","baseUrl","i","data","fetch","responseFirstPage","json","resultFirstPage","results","forEach","element","push","next","pageNumber","response","result","getData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.583b655c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport './AddOwnFavoriteStyle.css'\r\n\r\nconst AddCharacterForm=({favorites, setFavorites})=>{\r\n   \r\n    const [isAdded, setIsAdded]=useState(false)\r\n    const [name, setName]=useState('')\r\n    const [birthYear, setBirthYear]=useState('')\r\n    const [era, setEra]=useState('')\r\n    const [hairColor, setHairColor]=useState('')\r\n    const [skinColor, setSkinColor]=useState('')\r\n\r\n    const [nameIsTouched, setNameIsTouched]=useState(false)\r\n    const [birthYearIsTouched, setBirthYearIsTouched]=useState(false)\r\n    const [hairColorIsTouched, setHairColorIsTouched]=useState(false)\r\n    const [skinColorIsTouched, setSkinColorIsTouched]=useState(false)\r\n\r\n    const [subMsgClassName, setSubMsgClassName]=useState('not-submitted')\r\n\r\n    let submitMessage='Character added. May the force be with you.'\r\n    let filteredPeople=favorites.filter(item=>item.birth_year !==undefined)\r\n    let invalidButton=true\r\n    \r\n    //För att validera alla inputfält\r\n    let [validName, nameValidMessage] = nameIsValid(name, filteredPeople, isAdded);\r\n    let [validBirthYear, birthYearValidMessage] = birthYearIsValid(birthYear);\r\n    let [validHairColor, hairColorValidMessage] = hairColorIsValid(hairColor);\r\n    let [validSkinColor, skinColorValidMessage] = skinColorIsValid(skinColor);\r\n    \r\n    //Kollar om alla inputfält är validerade och ok.\r\n    let isValid=checkIfAllIsValid(validName, validBirthYear, validHairColor, validSkinColor)\r\n    let validEra=true\r\n    let eraValidMessage=''\r\n    \r\n    //Om allt är validerat och ok, låses knappen upp\r\n    if (isValid){\r\n        invalidButton=false;\r\n    }\r\n    //efter att man addat töms inputfält och touched ställs till false\r\n    useEffect(()=>{\r\n        setName('')\r\n        setHairColor('')\r\n        setBirthYear('')\r\n        setSkinColor('')\r\n        setNameIsTouched(false)\r\n        setHairColorIsTouched(false)\r\n        setBirthYearIsTouched(false)\r\n        setSkinColorIsTouched(false)\r\n        console.log('i useEffect')\r\n    },[isAdded])\r\n   \r\n\r\n    const handleSubmit=(e)=>{\r\n         //förhindrar att sidan laddas om när man trycker på knappen inuti Form taggen\r\n        e.preventDefault();\r\n\r\n        \r\n        let newCharacter={ \r\n            name:name,\r\n            birth_year:birthYear+era,\r\n            hair_color:hairColor,\r\n            skin_color:skinColor,\r\n            created:'by-me',\r\n            favorite:true\r\n        }\r\n        //lägger till nytt objekt till listan. Skriver ut sucessmeddelande.\r\n        let newCharAddedList=[...favorites, newCharacter]\r\n        setFavorites(newCharAddedList)\r\n        setSubMsgClassName('submitted')\r\n        setIsAdded(true)\r\n\r\n    }\r\n \r\n\r\n    return (    \r\n\r\n        <>\r\n            <label>Name</label>\r\n            <input type='text' id=\"fName\"\r\n            value={name}\r\n            className={!validName && nameIsTouched ? 'invalid' : ''}\r\n            onBlur={()=>setNameIsTouched(true)}\r\n            onChange={event=>setName(event.target.value)}/>\r\n            <strong className='invalid-message'>{nameValidMessage}</strong>\r\n         \r\n            <label>Birth year</label>\r\n            <input type='number' id=\"bday\"\r\n            value={birthYear}\r\n            className={!validBirthYear && birthYearIsTouched ? 'invalid' : ''}\r\n            onBlur={()=>setBirthYearIsTouched(true)} \r\n            onChange={event=>setBirthYear(event.target.value)}/>\r\n            <strong className='invalid-message'>{birthYearValidMessage}</strong>\r\n          \r\n            <div className='wrapper-era'>\r\n    \r\n                <label className='label-era'>BBY</label>\r\n                <input type='radio' name='swYear'\r\n                className={!validEra ?  'invalid' : 'input-era'}\r\n                value={era}\r\n                onClick={()=>setEra('BBY')}/>\r\n            \r\n                <label className='label-era'>ABY</label>\r\n                <input type='radio' name='swYear'\r\n                className={!validEra ? 'invalid' : 'input-era'}\r\n                value={era}\r\n                onClick={()=>setEra('ABY')}/>\r\n                <strong className='invalid-message'>{eraValidMessage}</strong>\r\n            \r\n    \r\n            </div>\r\n    \r\n            <label>Hair color</label>\r\n            <input type='text' id=\"haircolor\"\r\n            value={hairColor}\r\n            className={!validHairColor && hairColorIsTouched ? 'invalid' : ''}\r\n            onBlur={()=>setHairColorIsTouched(true)}     \r\n            onChange={event=>setHairColor(event.target.value)}/>\r\n            <strong className='invalid-message'>{hairColorValidMessage}</strong>\r\n          \r\n          \r\n            <label>Skin color</label>\r\n            <input type='text' id=\"skincolor\"\r\n            value={skinColor}\r\n            className={!validSkinColor && skinColorIsTouched ? 'invalid' : ''}\r\n            onBlur={()=>setSkinColorIsTouched(true)}   \r\n            onChange={event=>setSkinColor(event.target.value)}/>\r\n            <strong className='invalid-message'>{skinColorValidMessage}</strong>\r\n\r\n            <button className='submit-button' onClick={event=>handleSubmit(event)} disabled={invalidButton}>Use the force!</button>\r\n            <h3 className={subMsgClassName}>{submitMessage}</h3>\r\n            \r\n          \r\n        </>\r\n        )\r\n    \r\n\r\n}\r\n\r\nexport default AddCharacterForm\r\n\r\n\r\n//kollar om man fyllt i mer än noll i inputfälten\r\nconst nameIsValid=(name, filteredPeople, isAdded)=>{\r\n\r\n    if(!isAdded && filteredPeople.some(person=>person.name===name)){\r\n        return [false, 'Character with this name already exist']\r\n    }\r\n    if (name.length < 1){\r\n        return [false, 'Need to write a name']\r\n    }\r\n    else{\r\n        return [true, '']\r\n    }\r\n\r\n}\r\nconst birthYearIsValid=(birthYear)=>{\r\n\r\n    if( birthYear.length < 1 ) {\r\n        return [false, 'Need to write a birthday and pick BBY/ABY'];\r\n    } else {\r\n        \r\n        return [true, ''];\r\n    }\r\n}\r\nconst hairColorIsValid=(hairColor)=>{\r\n\r\n    if( hairColor.length < 1 ) {\r\n\r\n        return [false, 'Need to write a haircolor'];\r\n\r\n    } else {\r\n        \r\n        return [true, ''];\r\n    }\r\n\r\n}\r\nconst skinColorIsValid=(skinColor)=>{\r\n\r\n    if( skinColor.length < 1 ) {\r\n\r\n        return [false, 'Need to write a skincolor'];\r\n\r\n    } else {\r\n        \r\n        return [true, ''];\r\n    }\r\n\r\n}\r\n//kollar om alla är ok\r\nconst checkIfAllIsValid=(name, birthyear, haircolor,skincolor)=>{\r\n\r\n    if (name===true && birthyear===true && haircolor===true && skincolor===true){\r\n        return true\r\n    }\r\n    else{\r\n        return false\r\n    }\r\n}","import React, {useState, useEffect} from 'react'\r\nimport './AddOwnFavoriteStyle.css'\r\n\r\nconst AddPlanetForm=({favorites, setFavorites})=>{\r\n   \r\n    const [isAdded, setIsAdded]=useState(false)\r\n    const [name, setName]=useState('')\r\n    const [climate, setClimate]=useState('')\r\n    const [terrain, setTerrain]=useState('')\r\n    const [gravity, setGravity]=useState('')\r\n\r\n    const [nameIsTouched, setNameIsTouched]=useState(false)\r\n    const [climateIsTouched, setClimateIsTouched]=useState(false)\r\n    const [terrainIsTouched, setTerrainIsTouched]=useState(false)\r\n    const [gravityIsTouched, setGravityIsTouched]=useState(false)\r\n\r\n    const [subMsgClassName, setSubMsgClassName]=useState('not-submitted')\r\n\r\n    let submitMessage='Planet added. May the force be with you.'\r\n    let filteredPlanets=favorites.filter(item=>item.terrain !==undefined)\r\n    let invalidButton=true\r\n\r\n    //För att validera alla inputfält\r\n    let [validName, nameValidMessage] = nameIsValid(name, filteredPlanets, isAdded);\r\n    let [validClimate, climateValidMessage] = climateIsValid(climate);\r\n    let [validTerrain, terrainValidMessage] = terrainIsValid(terrain);\r\n    let [validGravity, gravityrValidMessage] = gravityIsValid(gravity);\r\n\r\n    //Kollar om alla inputfält är validerade och ok.\r\n    let isValid=checkIfAllIsValid(validName, validClimate, validTerrain, validGravity)\r\n\r\n    //Om allt är validerat och ok, låses knappen upp\r\n    if (isValid){\r\n      invalidButton=false;\r\n    }\r\n\r\n    //efter att man addat töms inputfält och touched ställs till false\r\n    useEffect(()=>{\r\n      setName('')\r\n      setClimate('')\r\n      setTerrain('')\r\n      setGravity('')\r\n      setNameIsTouched(false)\r\n      setClimateIsTouched(false)\r\n      setTerrainIsTouched(false)\r\n      setGravityIsTouched(false)\r\n      \r\n  },[isAdded])\r\n\r\n\r\n  const handleSubmit=(e)=>{\r\n      \r\n    //förhindrar att sidan laddas om när man trycker på knappen inuti Form taggen\r\n    e.preventDefault();\r\n\r\n        let newPlanet={ \r\n            name:name,\r\n            climate:climate,\r\n            terrain:terrain,\r\n            gravity:gravity,\r\n            created:'by-me',\r\n            favorite:true\r\n        }\r\n\r\n        //lägger till nytt objekt till listan. Skriver ut sucessmeddelande.\r\n        let newPlanetAddedList=[...favorites, newPlanet]\r\n        setFavorites(newPlanetAddedList)\r\n        setSubMsgClassName('submitted')\r\n        setIsAdded(true)\r\n\r\n}\r\n\r\n    return (\r\n\r\n        <>\r\n              <label>Name</label>\r\n              <input type='text' id=\"fName\"\r\n              value={name}\r\n              className={!validName && nameIsTouched ? 'invalid' : ''}\r\n              onBlur={()=>setNameIsTouched(true)}  \r\n              onChange={event=>setName(event.target.value)}/>\r\n               <strong className='invalid-message'>{nameValidMessage}</strong>\r\n              \r\n              \r\n              <label>Climate</label>\r\n              <input type='text' id=\"hWorld\"\r\n              value={climate}\r\n              className={!validClimate && climateIsTouched ? 'invalid' : ''}\r\n              onBlur={()=>setClimateIsTouched(true)}   \r\n              onChange={event=>setClimate(event.target.value)}/>\r\n                <strong className='invalid-message'>{climateValidMessage}</strong>\r\n          \r\n              <label>Terrain</label>\r\n              <input type='text' id=\"terrain\"\r\n              value={terrain}\r\n              className={!validTerrain && terrainIsTouched ? 'invalid' : ''}\r\n              onBlur={()=>setTerrainIsTouched(true)}     \r\n              onChange={event=>setTerrain(event.target.value)}/>\r\n               <strong className='invalid-message'>{terrainValidMessage}</strong>\r\n              \r\n              <label>Gravity</label>\r\n              <input type='text' id=\"gravity\"\r\n              value={gravity}\r\n              className={!validGravity && gravityIsTouched ? 'invalid' : ''}\r\n              onBlur={()=>setGravityIsTouched(true)}   \r\n              onChange={event=>setGravity(event.target.value)}/>\r\n              <strong className='invalid-message'>{terrainValidMessage}</strong>\r\n             \r\n            <button className='submit-button' onClick={event=>handleSubmit(event)} disabled={invalidButton}>Use the force!</button>\r\n            <h3 className={subMsgClassName}>{submitMessage}</h3>\r\n           \r\n              </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default AddPlanetForm\r\n\r\nconst nameIsValid=(name, filteredPlanets, isAdded)=>{\r\n\r\n  if(!isAdded && filteredPlanets.some(planet=>planet.name===name)){\r\n    \r\n      return [false, 'Planet with this name already exist']\r\n  }\r\n  if (name.length < 1){\r\n      return [false, 'Need to write a name']\r\n  }\r\n  else{\r\n      return [true, '']\r\n  }\r\n\r\n}\r\nconst climateIsValid=(climate)=>{\r\n\r\n  if( climate.length < 1 ) {\r\n      return [false, 'Add something about climate'];\r\n  } else {\r\n      \r\n      return [true, ''];\r\n  }\r\n}\r\nconst terrainIsValid=(terrain)=>{\r\n\r\n  if( terrain.length < 1 ) {\r\n\r\n      return [false, 'Add something about terrain'];\r\n\r\n  } else {\r\n      \r\n      return [true, ''];\r\n  }\r\n\r\n}\r\nconst gravityIsValid=(gravity)=>{\r\n\r\n  if( gravity.length < 1 ) {\r\n\r\n      return [false, 'Add something about gravity'];\r\n\r\n  } else {\r\n      \r\n      return [true, ''];\r\n  }\r\n\r\n}\r\nconst checkIfAllIsValid=(name, climate, terrain,gravity)=>{\r\n\r\n  if (name===true && climate===true && terrain===true && gravity===true){\r\n      return true\r\n  }\r\n  else{\r\n      return false\r\n  }\r\n}","import React, {useState} from 'react'\r\nimport AddCharacterForm from './AddCharacterForm'\r\nimport AddPlanetForm from './AddPlanetForm'\r\nimport './AddOwnFavoriteStyle.css'\r\n\r\nconst AddOwnFavorite=({favorites, setFavorites})=>{\r\n\r\n    const [category, setCategory]=useState('character')\r\n    let currentCategoryForm=null;\r\n    switch(category){\r\n  \r\n        case 'character':\r\n        currentCategoryForm=<AddCharacterForm favorites={favorites} setFavorites={setFavorites}/>\r\n\r\n            break;\r\n        case 'planet':\r\n            currentCategoryForm=<AddPlanetForm favorites={favorites} setFavorites={setFavorites}/>\r\n            \r\n            break;\r\n        default:\r\n            currentCategoryForm=<AddCharacterForm favorites={favorites} setFavorites={setFavorites}/>\r\n              \r\n    }\r\n \r\n\r\n    return(\r\n\r\n        <div className='wrapper'>\r\n  \r\n            <div className='formImage'></div>\r\n  \r\n            <div className='formContainer'>\r\n            \r\n                <h2>Add your own {category}</h2>\r\n                \r\n\r\n                <form className='add-form'>\r\n\r\n                    <div className='category-container'>\r\n\r\n                        <label className='label-for-category'>Add character</label>\r\n                        <input type='radio' className='radio' name='category' value={category} onClick={()=>setCategory('character')}/>\r\n                        \r\n                        <label className='label-for-category' >Add planet</label>\r\n                        <input type='radio' className='radio' name='category' value={category} onClick={()=>setCategory('planet')}/>\r\n                \r\n                    </div>\r\n\r\n                    {currentCategoryForm}\r\n        \r\n                </form>\r\n\r\n                \r\n            </div>\r\n      </div>\r\n\r\n    )\r\n}\r\n\r\nexport default AddOwnFavorite","import React  from 'react'\r\nimport './HeaderStyle.css'\r\n\r\n\r\nconst Header=({displayPage, setDisplayPage})=>{\r\n\r\n    let searchNav='nav-not-active';\r\n    let addNav='nav-not-active';\r\n    let favoritesNav='nav-not-active';\r\n\r\n    if(displayPage==='SEARCH'){\r\n        searchNav='nav-active'\r\n    }\r\n    else if(displayPage==='ADD'){\r\n        addNav='nav-active'\r\n    }\r\n    else if(displayPage==='FAVORITES'){\r\n        favoritesNav='nav-active'\r\n    }\r\n\r\n       function handlePageToggle(page){\r\n\r\n        if (page==='SEARCH'){\r\n            setDisplayPage(page)\r\n            \r\n\r\n        }else if (page==='ADD'){\r\n            setDisplayPage(page)\r\n           \r\n        }\r\n        else if(page==='FAVORITES'){\r\n            setDisplayPage('FAVORITES')\r\n           \r\n        }\r\n        else if(page==='WELCOME'){\r\n            setDisplayPage('WELCOME')\r\n            \r\n        }\r\n    }\r\n    \r\n\r\n\r\n    return (\r\n\r\n        <header>\r\n\r\n        <p className=\"headerLogo\" onClick={()=>handlePageToggle('WELCOME')}>Star Wars</p>\r\n\r\n        <nav className=\"navbar\">\r\n            <p className={searchNav} onClick={()=>handlePageToggle('SEARCH')}>Info</p>\r\n            <p className={favoritesNav} onClick={()=>handlePageToggle('FAVORITES')}>Favorites</p>\r\n            <p className={addNav} onClick={()=>handlePageToggle('ADD')}>Create character</p>\r\n        </nav>\r\n\r\n        </header>\r\n    )\r\n\r\n}\r\n\r\nexport default Header","import React, {useState} from 'react'\r\nimport './SearchStyle.css'\r\n\r\nconst Search=({peopleData, planetsData, favorites, setFavorites})=>{\r\n\r\n   const [category, setCategory]=useState('PEOPLE')\r\n   const [searchParams, setSearchParams]=useState('')\r\n\r\n   //lägger till favoriter till lista\r\n    function handleAddToFavorites(newItem){\r\n\r\n        if(favorites.some(item=>item.name===newItem.name)){\r\n            newItem.favorite=false;\r\n            setFavorites(favorites.filter(item=>item !==newItem))\r\n        }\r\n        else{\r\n            newItem.favorite=true\r\n            let newFavorite=[...favorites, newItem]\r\n            setFavorites(newFavorite)\r\n        }\r\n      \r\n    } \r\n\r\n    let cardButtonCss=null\r\n    \r\n\r\n    //Renderar listan people utifrån om och vad man skrivit i searchrutan\r\n    let jsxListPeople=peopleData.filter(person=>\r\n        person.name.toLowerCase().includes(searchParams.toLowerCase()) \r\n    ||  person.hair_color.toLowerCase().includes(searchParams.toLowerCase()) \r\n    ||  person.birth_year.toLowerCase().includes(searchParams.toLowerCase())\r\n    ||  person.skin_color.toLowerCase().includes(searchParams.toLowerCase())\r\n    ).map((person)=>{\r\n\r\n        //ändrar likeknappen beroende på om objektet är favorit eller ej\r\n        if (person.favorite===true){\r\n            // buttonDisabled=true;\r\n            cardButtonCss='favorite'\r\n        }\r\n        else{\r\n            // buttonDisabled=false;\r\n            cardButtonCss='no-favorite'\r\n        }\r\n\r\n        return(\r\n            <div key={person.name}  className='card'>\r\n                <h2 className={person.gender}>{person.name}</h2>\r\n                <p>Birt hyear: {person.birth_year}</p>\r\n                <p>Hair color: {person.hair_color}</p>\r\n                <p>Skin color: {person.skin_color}</p>\r\n                <div className={cardButtonCss} onClick={()=>handleAddToFavorites(person)} ></div>\r\n            </div>)\r\n    \r\n    })\r\n\r\n    //Renderar listan planets utifrån om och vad man skrivit i searchrutan\r\n    let jsxListPlanets=planetsData.filter(planet=>\r\n        planet.name.toLowerCase().includes(searchParams.toLowerCase())\r\n    ||  planet.climate.toLowerCase().includes(searchParams.toLowerCase())\r\n    ||  planet.terrain.toLowerCase().includes(searchParams.toLowerCase()) \r\n    ||  planet.gravity.toLowerCase().includes(searchParams.toLowerCase()) \r\n    ).map((planet)=>{\r\n\r\n         //ändrar likeknappen beroende på om objektet är favorit eller ej\r\n         if (planet.favorite===true){\r\n            // buttonDisabled=true;\r\n            cardButtonCss='favorite'\r\n        }\r\n        else{\r\n            // buttonDisabled=false;\r\n            cardButtonCss='no-favorite'\r\n        }\r\n\r\n        return (\r\n            <div key={planet.name}  className='card'>\r\n                <h2>{planet.name}</h2>\r\n                <p>Climate: {planet.climate}</p>\r\n                <p>Terrain: {planet.terrain}</p>\r\n                <p>Gravity: {planet.gravity}</p>\r\n                <div className={cardButtonCss} onClick={()=>handleAddToFavorites(planet)} ></div>\r\n            </div>)\r\n    })  \r\n\r\n    //variabler som styr classnamn för kategoriknappar\r\n    let currentCategory=null;\r\n    let peoplebutton='not-active'\r\n    let planetsbutton='not-active'\r\n\r\n    //vilken lista ska vara synlig styrs här\r\n    switch(category){\r\n\r\n        case 'PEOPLE':\r\n            currentCategory=jsxListPeople\r\n            peoplebutton='active'\r\n\r\n            break;\r\n\r\n        case 'PLANETS':\r\n            currentCategory=jsxListPlanets\r\n            planetsbutton='active'\r\n            break;\r\n\r\n        default:\r\n            console.log('Sidan hittas ej')\r\n\r\n    }\r\n    //det som renderas på sidan\r\n    return(\r\n\r\n        <div className='search-comp'>\r\n            <div className='buttons-container'>\r\n                <button className={peoplebutton} onClick={()=> setCategory('PEOPLE')}>People</button>\r\n                <button className={planetsbutton} onClick={()=> setCategory('PLANETS')}>Planets</button>\r\n            </div>\r\n            <div className='input-container'>\r\n                <div className='image-container'>\r\n                    <div className='search-image'></div>\r\n                </div>\r\n                \r\n                <input className=\"searchfield\" type='text' \r\n                    placeholder='Search and you will find....' \r\n                    value={searchParams}\r\n                    onChange={e=>setSearchParams(e.target.value)}/>\r\n\r\n            </div>\r\n    \r\n                {/* <a id=\"top\">'</a> */}\r\n                    <div className='grid-container'>\r\n                        {currentCategory}\r\n                        {/* <a href=\"#top\"> */}\r\n                            <button className='to-the-top'>To the top</button>\r\n                        {/* </a> */}\r\n\r\n                    </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","import React, {useState} from 'react'\r\nimport './FavoritesStyle.css'\r\n\r\nconst Favorites=({favorites, setFavorites})=>{\r\n  \r\n    const [displayList, setDisplayList]=useState('ALL')\r\n\r\n    const handleRemove=itemToRemove=>{\r\n        itemToRemove.favorite=false;\r\n        setFavorites(favorites.filter(item=>item !==itemToRemove))\r\n    }\r\n  \r\n    //variabler för vilken knapp som är aktiv\r\n    let favAllButton='fav-not-active' , favPeopleButton='fav-not-active', favPlanetsButton='fav-not-active';\r\n    //variabler för att styra vilken lista som ska användas i .map funktionen\r\n    let currentList=null;\r\n    let jsxListPeople=favorites.filter(item=>item.birth_year!==undefined)\r\n    let jsxListPlanets=favorites.filter(item=>item.birth_year===undefined)\r\n     //variabler för att styra vilken text som ska renderas beroende på people/planets\r\n     let imageClassName=null;\r\n     let category1=null\r\n     let category2=null\r\n     let category3=null\r\n     let categoryItem1=null\r\n     let categoryItem2=null\r\n     let categoryItem3=null\r\n    \r\n     let nofavv=null\r\n    \r\n    switch(displayList){\r\n\r\n        case 'ALL':\r\n            currentList=favorites\r\n            favAllButton='fav-active'\r\n        break;\r\n        case 'PEOPLE':\r\n            currentList=jsxListPeople\r\n            favPeopleButton='fav-active'\r\n        break;\r\n        case 'PLANETS':\r\n            currentList=jsxListPlanets\r\n            favPlanetsButton='fav-active'\r\n        break;\r\n        \r\n        default:\r\n           \r\n           currentList=favorites\r\n           favAllButton='fav-active'\r\n\r\n    }\r\n    \r\n    let jsxList=currentList.map((item, index)=>{\r\n\r\n        if(item.created==='by-me'){\r\n            imageClassName='image-user'\r\n        }\r\n        else{\r\n          \r\n            imageClassName='image-globe'\r\n        }\r\n        if (item.terrain!==undefined){\r\n            category1='Climate: '\r\n            category2='Terrain: '\r\n            category3='Gravity: '\r\n            categoryItem1=item.climate\r\n            categoryItem2=item.terrain\r\n            categoryItem3=item.gravity\r\n        }\r\n        else{\r\n            category1='Birth year: '\r\n            category2='Hair color: '\r\n            category3='Skin color: '\r\n            categoryItem1=item.birth_year\r\n            categoryItem2=item.hair_color\r\n            categoryItem3=item.skin_color\r\n        }\r\n        return (<div key={item.name+index}  className='card'>\r\n        \r\n            <div className='top-wrapper'> \r\n                <h2>{item.name}</h2>  \r\n                <div className={imageClassName}></div>     \r\n            </div>\r\n           \r\n            <p>{category1} {categoryItem1}</p>\r\n            <p>{category2} {categoryItem2}</p>\r\n            <p>{category3} {categoryItem3}</p>\r\n    \r\n            <div className='favorite' onClick={()=>handleRemove(item)} ></div>\r\n        </div>)\r\n \r\n    })//slut jsxList\r\n\r\n    if (favorites.length===0)\r\n    return(<div className='nofavv'>There is no spoon....eh....sorry, wrong movie</div>)\r\n   \r\n    return(\r\n        <div>\r\n            <div className='button-container-favorites'>\r\n                <button className={favAllButton} onClick={()=>setDisplayList('ALL')}>All</button>\r\n                <button className={favPeopleButton} onClick={()=>setDisplayList('PEOPLE')}>People</button>\r\n                <button className={favPlanetsButton} onClick={()=>setDisplayList('PLANETS')}>Planets</button>\r\n            </div>\r\n            \r\n            <div className='grid-container-favorites'>\r\n                {jsxList}\r\n                {nofavv}\r\n\r\n            </div>\r\n\r\n        </div>\r\n  \r\n    )\r\n}\r\n\r\nexport default Favorites","import React, {useState, useEffect} from 'react';\nimport AddOwnFavorite from './components/AddOwnFavorite'\nimport Header from './components/Header'\nimport Search from './components/Search'\nimport Favorites from './components/Favorites'\nimport './App.css';\n\n\n\nfunction App() {\n\n  let developObject=[{name:'Minion',birth_year:'22bc',hair_color:'black',skin_color:'yellow', created:'nåt datum'}, {name:'E.T', birth_year:'1982', hair_color:'none', skin_color:'brown', created:'by-me'},{name:'Earth', terrain:'everything', climate:'warm and cold', gravity:'lagom'}]\n\n  const[peopleData, setPeopleData]=useState([])\n  const[planetsData, setPlanetsData]=useState([])\n  const[displayPage, setDisplayPage]=useState('WELCOME')\n  const[favorites, setFavorites]=useState(developObject)\n  \n\n  let currentPage=null;\n  let welcomeText=null;\n\n  switch(displayPage){\n\n    case 'WELCOME':\n      welcomeText=(<div className=\"welcome-text\">The information <br/> you want,<br/> we have.</div>)\n      break;\n\n    case 'SEARCH':\n      currentPage= <Search peopleData={peopleData} planetsData={planetsData} favorites={favorites} setFavorites={setFavorites}/>\n      break;\n    \n    case 'ADD':\n      currentPage=<AddOwnFavorite favorites={favorites} setFavorites={setFavorites}/>\n      break;\n   \n    case 'FAVORITES':\n      currentPage=<Favorites favorites={favorites} setFavorites={setFavorites}/>\n      break;\n\n    default:\n      console.log('sidan finns ej')\n\n\n  }\n\n\n\n  //hämtar data från API\n  async function getData(){\n \n    let baseUrl='https://swapi.dev/api/'\n    let category='people'\n    //Loop som först hämtar people, sen hämtar planets\n    for (let i=0; i<=1; i++){\n\n      let data=[]\n\n      //hämtar första pagen med 10 st people\n      let responseFirstPage= await fetch(baseUrl+category);\n      let resultFirstPage=await responseFirstPage.json();\n    \n    \n       \n      //lägger in ny egenskap: favorite=false\n      resultFirstPage.results.forEach(element=>element.favorite=false)\n      //lägger in resultatet på tom datalista\n      resultFirstPage.results.forEach(element=>data.push(element))\n\n      let next=resultFirstPage.next\n      let pageNumber=2;\n\n      //loopar igenom restrerande url:er med sidor med people/planets\n      while (next!=null){\n         \n          let response=await fetch (baseUrl+category+'/?page='+pageNumber)\n          let result=await response.json();\n         \n\n          //lägger in ny egenskap: favorite=false\n          resultFirstPage.results.forEach(element=>element.favorite=false)\n\n          result.results.forEach(element=>data.push(element))\n          pageNumber++\n  \n          next=result.next\n      }\n\n        if(category==='people'){\n          setPeopleData(data)\n        }\n        else{\n          setPlanetsData(data)\n        }\n        category='planets'\n    } \n}//slut getpeoplefunc\n\n\nuseEffect(()=>{\n  \n  getData();\n\n},[])\n\n\n\n  return (\n    <div className=\"App\">\n      <Header displayPage={displayPage} setDisplayPage={setDisplayPage}/>\n     {currentPage}\n     {welcomeText}\n      \n\n    </div>\n  );\n}//slut app\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}